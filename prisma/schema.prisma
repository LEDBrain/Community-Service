generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SanctionType {
  BAN
  UNBAN
  KICK
  MUTE
  UNMUTE
  WARN
}

model GuildSettings {
  id                 String   @id
  logChannelId       String   @default("")
  muteRoleId         String   @default("")
  disabledCommands   String[]
  banApprovalsNeeded Int      @default(1)
}

model Sanction {
  id          Int          @id @default(autoincrement())
  userId      String
  moderatorId String
  reason      String?      @default("N/A")
  type        SanctionType
  timestamp   DateTime     @default(now())

  approved_by String[]

  sanctioning_end DateTime?
  terminatedBy    Int?


  User                User       @relation("sanctionUser", fields: [userId], references: [id])
  Moderator           User       @relation("sanctionModerator", fields: [moderatorId], references: [id])
  TerminatingSanction Sanction?  @relation("SanctionToSanction", fields: [terminatedBy], references: [id])
  Sanction            Sanction[] @relation("SanctionToSanction")
}

model User {
  id String @id

  sanctions         Sanction[]   @relation("sanctionUser")
  sanctioned        Sanction[]   @relation("sanctionModerator")
  banRequest        BanRequest[] @relation("banRequestUser")
  createdBanRequest BanRequest[] @relation("banRequestModerator")
}

model BanRequest {
  id           Int      @id @default(autoincrement())
  userId       String
  moderatorId  String
  messageId    String
  guildId      String
  reason       String?  @default("N/A")
  daysToDelete Int?     @default(0)
  timestamp    DateTime @default(now())
  isRejected   Boolean  @default(false)

  approved_by String[]

  User      User @relation("banRequestUser", fields: [userId], references: [id])
  Moderator User @relation("banRequestModerator", fields: [moderatorId], references: [id])
}
